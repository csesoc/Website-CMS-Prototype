// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	contexts "cms.csesoc.unsw.edu.au/database/contexts"
	repositories "cms.csesoc.unsw.edu.au/database/repositories"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockFilesystemRepository is a mock of FilesystemRepository interface.
type MockFilesystemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilesystemRepositoryMockRecorder
}

// MockFilesystemRepositoryMockRecorder is the mock recorder for MockFilesystemRepository.
type MockFilesystemRepositoryMockRecorder struct {
	mock *MockFilesystemRepository
}

// NewMockFilesystemRepository creates a new mock instance.
func NewMockFilesystemRepository(ctrl *gomock.Controller) *MockFilesystemRepository {
	mock := &MockFilesystemRepository{ctrl: ctrl}
	mock.recorder = &MockFilesystemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesystemRepository) EXPECT() *MockFilesystemRepositoryMockRecorder {
	return m.recorder
}

// CreateEntry mocks base method.
func (m *MockFilesystemRepository) CreateEntry(file repositories.FilesystemEntry) (repositories.FilesystemEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", file)
	ret0, _ := ret[0].(repositories.FilesystemEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockFilesystemRepositoryMockRecorder) CreateEntry(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockFilesystemRepository)(nil).CreateEntry), file)
}

// DeleteEntryWithID mocks base method.
func (m *MockFilesystemRepository) DeleteEntryWithID(ID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryWithID", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntryWithID indicates an expected call of DeleteEntryWithID.
func (mr *MockFilesystemRepositoryMockRecorder) DeleteEntryWithID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryWithID", reflect.TypeOf((*MockFilesystemRepository)(nil).DeleteEntryWithID), ID)
}

// GetContext mocks base method.
func (m *MockFilesystemRepository) GetContext() contexts.DatabaseContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(contexts.DatabaseContext)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockFilesystemRepositoryMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockFilesystemRepository)(nil).GetContext))
}

// GetEntryWithID mocks base method.
func (m *MockFilesystemRepository) GetEntryWithID(ID uuid.UUID) (repositories.FilesystemEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryWithID", ID)
	ret0, _ := ret[0].(repositories.FilesystemEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryWithID indicates an expected call of GetEntryWithID.
func (mr *MockFilesystemRepositoryMockRecorder) GetEntryWithID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryWithID", reflect.TypeOf((*MockFilesystemRepository)(nil).GetEntryWithID), ID)
}

// GetEntryWithParentID mocks base method.
func (m *MockFilesystemRepository) GetEntryWithParentID(ID uuid.UUID) (repositories.FilesystemEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryWithParentID", ID)
	ret0, _ := ret[0].(repositories.FilesystemEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryWithParentID indicates an expected call of GetEntryWithParentID.
func (mr *MockFilesystemRepositoryMockRecorder) GetEntryWithParentID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryWithParentID", reflect.TypeOf((*MockFilesystemRepository)(nil).GetEntryWithParentID), ID)
}

// GetIDWithPath mocks base method.
func (m *MockFilesystemRepository) GetIDWithPath(path string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDWithPath", path)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDWithPath indicates an expected call of GetIDWithPath.
func (mr *MockFilesystemRepositoryMockRecorder) GetIDWithPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDWithPath", reflect.TypeOf((*MockFilesystemRepository)(nil).GetIDWithPath), path)
}

// GetRoot mocks base method.
func (m *MockFilesystemRepository) GetRoot() (repositories.FilesystemEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(repositories.FilesystemEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockFilesystemRepositoryMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockFilesystemRepository)(nil).GetRoot))
}

// RenameEntity mocks base method.
func (m *MockFilesystemRepository) RenameEntity(ID uuid.UUID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameEntity", ID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameEntity indicates an expected call of RenameEntity.
func (mr *MockFilesystemRepositoryMockRecorder) RenameEntity(ID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameEntity", reflect.TypeOf((*MockFilesystemRepository)(nil).RenameEntity), ID, name)
}

// MockUnpublishedVolumeRepository is a mock of UnpublishedVolumeRepository interface.
type MockUnpublishedVolumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUnpublishedVolumeRepositoryMockRecorder
}

// MockUnpublishedVolumeRepositoryMockRecorder is the mock recorder for MockUnpublishedVolumeRepository.
type MockUnpublishedVolumeRepositoryMockRecorder struct {
	mock *MockUnpublishedVolumeRepository
}

// NewMockUnpublishedVolumeRepository creates a new mock instance.
func NewMockUnpublishedVolumeRepository(ctrl *gomock.Controller) *MockUnpublishedVolumeRepository {
	mock := &MockUnpublishedVolumeRepository{ctrl: ctrl}
	mock.recorder = &MockUnpublishedVolumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnpublishedVolumeRepository) EXPECT() *MockUnpublishedVolumeRepositoryMockRecorder {
	return m.recorder
}

// AddToVolume mocks base method.
func (m *MockUnpublishedVolumeRepository) AddToVolume(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToVolume", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToVolume indicates an expected call of AddToVolume.
func (mr *MockUnpublishedVolumeRepositoryMockRecorder) AddToVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToVolume", reflect.TypeOf((*MockUnpublishedVolumeRepository)(nil).AddToVolume), filename)
}

// CopyToVolume mocks base method.
func (m *MockUnpublishedVolumeRepository) CopyToVolume(src *os.File, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToVolume", src, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyToVolume indicates an expected call of CopyToVolume.
func (mr *MockUnpublishedVolumeRepositoryMockRecorder) CopyToVolume(src, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToVolume", reflect.TypeOf((*MockUnpublishedVolumeRepository)(nil).CopyToVolume), src, filename)
}

// DeleteFromVolume mocks base method.
func (m *MockUnpublishedVolumeRepository) DeleteFromVolume(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVolume", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromVolume indicates an expected call of DeleteFromVolume.
func (mr *MockUnpublishedVolumeRepositoryMockRecorder) DeleteFromVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVolume", reflect.TypeOf((*MockUnpublishedVolumeRepository)(nil).DeleteFromVolume), filename)
}

// GetFromVolume mocks base method.
func (m *MockUnpublishedVolumeRepository) GetFromVolume(filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVolume", filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVolume indicates an expected call of GetFromVolume.
func (mr *MockUnpublishedVolumeRepositoryMockRecorder) GetFromVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVolume", reflect.TypeOf((*MockUnpublishedVolumeRepository)(nil).GetFromVolume), filename)
}

// GetFromVolumeTruncated mocks base method.
func (m *MockUnpublishedVolumeRepository) GetFromVolumeTruncated(filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVolumeTruncated", filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVolumeTruncated indicates an expected call of GetFromVolumeTruncated.
func (mr *MockUnpublishedVolumeRepositoryMockRecorder) GetFromVolumeTruncated(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVolumeTruncated", reflect.TypeOf((*MockUnpublishedVolumeRepository)(nil).GetFromVolumeTruncated), filename)
}

// MockPublishedVolumeRepository is a mock of PublishedVolumeRepository interface.
type MockPublishedVolumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPublishedVolumeRepositoryMockRecorder
}

// MockPublishedVolumeRepositoryMockRecorder is the mock recorder for MockPublishedVolumeRepository.
type MockPublishedVolumeRepositoryMockRecorder struct {
	mock *MockPublishedVolumeRepository
}

// NewMockPublishedVolumeRepository creates a new mock instance.
func NewMockPublishedVolumeRepository(ctrl *gomock.Controller) *MockPublishedVolumeRepository {
	mock := &MockPublishedVolumeRepository{ctrl: ctrl}
	mock.recorder = &MockPublishedVolumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishedVolumeRepository) EXPECT() *MockPublishedVolumeRepositoryMockRecorder {
	return m.recorder
}

// AddToVolume mocks base method.
func (m *MockPublishedVolumeRepository) AddToVolume(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToVolume", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToVolume indicates an expected call of AddToVolume.
func (mr *MockPublishedVolumeRepositoryMockRecorder) AddToVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToVolume", reflect.TypeOf((*MockPublishedVolumeRepository)(nil).AddToVolume), filename)
}

// CopyToVolume mocks base method.
func (m *MockPublishedVolumeRepository) CopyToVolume(src *os.File, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToVolume", src, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyToVolume indicates an expected call of CopyToVolume.
func (mr *MockPublishedVolumeRepositoryMockRecorder) CopyToVolume(src, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToVolume", reflect.TypeOf((*MockPublishedVolumeRepository)(nil).CopyToVolume), src, filename)
}

// DeleteFromVolume mocks base method.
func (m *MockPublishedVolumeRepository) DeleteFromVolume(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromVolume", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromVolume indicates an expected call of DeleteFromVolume.
func (mr *MockPublishedVolumeRepositoryMockRecorder) DeleteFromVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromVolume", reflect.TypeOf((*MockPublishedVolumeRepository)(nil).DeleteFromVolume), filename)
}

// GetFromVolume mocks base method.
func (m *MockPublishedVolumeRepository) GetFromVolume(filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVolume", filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVolume indicates an expected call of GetFromVolume.
func (mr *MockPublishedVolumeRepositoryMockRecorder) GetFromVolume(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVolume", reflect.TypeOf((*MockPublishedVolumeRepository)(nil).GetFromVolume), filename)
}

// GetFromVolumeTruncated mocks base method.
func (m *MockPublishedVolumeRepository) GetFromVolumeTruncated(filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromVolumeTruncated", filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromVolumeTruncated indicates an expected call of GetFromVolumeTruncated.
func (mr *MockPublishedVolumeRepositoryMockRecorder) GetFromVolumeTruncated(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromVolumeTruncated", reflect.TypeOf((*MockPublishedVolumeRepository)(nil).GetFromVolumeTruncated), filename)
}

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// GetPersonWithDetails mocks base method.
func (m *MockPersonRepository) GetPersonWithDetails(arg0 repositories.Person) repositories.Person {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonWithDetails", arg0)
	ret0, _ := ret[0].(repositories.Person)
	return ret0
}

// GetPersonWithDetails indicates an expected call of GetPersonWithDetails.
func (mr *MockPersonRepositoryMockRecorder) GetPersonWithDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonWithDetails", reflect.TypeOf((*MockPersonRepository)(nil).GetPersonWithDetails), arg0)
}

// PersonExists mocks base method.
func (m *MockPersonRepository) PersonExists(arg0 repositories.Person) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersonExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PersonExists indicates an expected call of PersonExists.
func (mr *MockPersonRepositoryMockRecorder) PersonExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersonExists", reflect.TypeOf((*MockPersonRepository)(nil).PersonExists), arg0)
}

// MockGroupsRepository is a mock of GroupsRepository interface.
type MockGroupsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsRepositoryMockRecorder
}

// MockGroupsRepositoryMockRecorder is the mock recorder for MockGroupsRepository.
type MockGroupsRepositoryMockRecorder struct {
	mock *MockGroupsRepository
}

// NewMockGroupsRepository creates a new mock instance.
func NewMockGroupsRepository(ctrl *gomock.Controller) *MockGroupsRepository {
	mock := &MockGroupsRepository{ctrl: ctrl}
	mock.recorder = &MockGroupsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsRepository) EXPECT() *MockGroupsRepositoryMockRecorder {
	return m.recorder
}

// GetGroupInfo mocks base method.
func (m *MockGroupsRepository) GetGroupInfo(arg0 repositories.Groups) repositories.Groups {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupInfo", arg0)
	ret0, _ := ret[0].(repositories.Groups)
	return ret0
}

// GetGroupInfo indicates an expected call of GetGroupInfo.
func (mr *MockGroupsRepositoryMockRecorder) GetGroupInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupInfo", reflect.TypeOf((*MockGroupsRepository)(nil).GetGroupInfo), arg0)
}

// MockFrontendsRepository is a mock of FrontendsRepository interface.
type MockFrontendsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFrontendsRepositoryMockRecorder
}

// MockFrontendsRepositoryMockRecorder is the mock recorder for MockFrontendsRepository.
type MockFrontendsRepositoryMockRecorder struct {
	mock *MockFrontendsRepository
}

// NewMockFrontendsRepository creates a new mock instance.
func NewMockFrontendsRepository(ctrl *gomock.Controller) *MockFrontendsRepository {
	mock := &MockFrontendsRepository{ctrl: ctrl}
	mock.recorder = &MockFrontendsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFrontendsRepository) EXPECT() *MockFrontendsRepositoryMockRecorder {
	return m.recorder
}

// GetFrontendFromURL mocks base method.
func (m *MockFrontendsRepository) GetFrontendFromURL(url string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrontendFromURL", url)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFrontendFromURL indicates an expected call of GetFrontendFromURL.
func (mr *MockFrontendsRepositoryMockRecorder) GetFrontendFromURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrontendFromURL", reflect.TypeOf((*MockFrontendsRepository)(nil).GetFrontendFromURL), url)
}

version: "3.8"

services:
  next:
    container_name: next
    build:
      context: ./next
      dockerfile: ./Dockerfile.development
    volumes:
      - './next:/next'
    stdin_open: true
    ports:
      - 3001:3001
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.development
    volumes:
      - './frontend:/app'
    stdin_open: true
    ports:
      - 3000:3000
  backend:
    container_name: go_backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile.development
    depends_on:
      - db
    volumes:
      - './backend:/go/src/cms.csesoc.unsw.edu.au'
      - 'unpublished_document_data:/var/lib/documents/unpublished/data'
      - 'published_document_data:/var/lib/documents/published/data'
    ports:
      - 8080:8080
    environment:
      - FRONTEND_URI=${FRONTEND_URI}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_PORT=${PG_PORT}
      - POSTGRES_HOST=${PG_HOST}
  db:
    container_name: pg_container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - ${PG_PORT}:5432
    volumes:
      - './postgres/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql'
      - 'pg_data:/var/lib/postgresql/data'
  staging_db:
    container_name: pg_container_testing
    image: postgres
    restart: always
    user: postgres
    environment:
      POSTGRES_PASSWORD: test
      POSTGRES_DB: cms_testing_db
    ports:
      - 1234:5432
    volumes:
      - './postgres/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql'
      - 'staging_pg_db:/var/lib/postgresql/data'
volumes:
  pg_data:
  staging_pg_db:
  unpublished_document_data:
  published_document_data: